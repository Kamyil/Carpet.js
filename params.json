{"name":"Carpet.js","tagline":"A simple DOM-module JavaScript framework","body":"# ![Carpet.js Icon](http://mgachowski.pl/carpetjs.svg) Carpet.js\r\n\r\n<small>project icon: Rug by Factorio.us collective from The Noun Project</small>\r\n\r\nMaster: [![Build Status](https://travis-ci.org/mateuszgachowski/Carpet.js.svg?branch=master)](https://travis-ci.org/mateuszgachowski/Carpet.js) Develop: [![Build Status](https://travis-ci.org/mateuszgachowski/Carpet.js.svg?branch=develop)](https://travis-ci.org/mateuszgachowski/Carpet.js)\r\n\r\n# Framework Usage\r\n\r\n## Installation\r\n\r\n```\r\nbower install carpet\r\n```\r\n\r\nor download the compressed file [from here](https://github.com/mateuszgachowski/Carpet.js/blob/master/dist/carpet.min.js)\r\n\r\n## Minimal application\r\n\r\nMinimal application will not do anything until you define some modules.\r\n\r\nExample:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <title>Carpet.js - Sample usage</title>\r\n  </head>\r\n  <body>\r\n    <!-- your code here -->\r\n    <script src=\"bower_components/carpet/dist/carpet.min.js\"></script>\r\n\r\n    <script>\r\n      Carpet.init(); // Initialises the framework\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Modules\r\n\r\nCarpet.js is about modules so you have to define one before you start.\r\nModules are defined very easily:\r\n\r\nIn html file:\r\n\r\n```html\r\n<div data-module=\"myFirstModule\"></div>\r\n```\r\nIn JS file (before `Carpet.init()`)\r\n\r\n```js\r\nCarpet.module('myFirstModule', function (exports, settings, context) {\r\n  'use strict';\r\n\r\n  exports.init = function () {\r\n    console.log('I will show when a data-module=\"myFirstModule\" will be found in DOM');\r\n  };\r\n});\r\n```\r\n\r\n`Carpet.module()` takes two parameters:\r\n- name of the module (string, it should fit the name put in `data-module` attribute)\r\n- module body (function which will contain all the module body)\r\n\r\nYour module body will be called with three parameters: `exports`, `settings` and `context`.\r\n\r\n- `exports` - object which will be 'public', you can extend it with a function or properties. `exports.init` is reserved for the initial function which will be called immediately after module init. If you do not provide `exports.init` the module will stay in the memory but have to be initialized in another way (e.g. PubSub)\r\n- `settings` - object with module settings. Settings can be passed by the DOM attribute as following:\r\n```js\r\ndata-settings=\"{'key' : 'value', sample: [1, 3, 5]}\"\r\n```\r\n\r\n- `context` - is a HTML DOM context which should be used as scope for all DOM finding actions, e.g. using jQuery:\r\n```js\r\n$('a', context).anything(); // or\r\n$(context).find('.my-pro-element').on('click', anotherFunction);\r\n```\r\n\r\n**Additional informations**\r\n\r\nIn module body you can also access its `this` context where you can find some additional data:\r\n\r\n```js\r\n  this.name       // - (string) containing the name of the module\r\n  this.moduleBody // - (function) body of the module\r\n  this.settings   // - (object) settings object\r\n  this.methods    // - (object) all public methods - same as 'exports'\r\n```\r\n\r\n## Logging to console\r\n\r\nCarpet.js comes with bunch of console.log extensions which will help you to organise your console output.\r\n\r\nSample logs:\r\n```js\r\nCarpet:log [\"Module: navigation has been loaded to memory\"]\r\nCarpet:info [\"Module: navigation has been autoinited\"]\r\n```\r\n\r\n**Enable logging**\r\n\r\nLogging is disabled by default. You can easily enable it by just setting the `Carpet.loggingEnabled` to `true`.\r\nRemember the property must be set before `Carpet.init()`.\r\n\r\n```js\r\nCarpet.loggingEnabled = true;\r\n```\r\n\r\n**Use available logging methods**\r\n\r\n```js\r\nCarpet.log('log me'); // with log level\r\nCarpet.warn('something wrong!'); // with warn level\r\nCarpet.error('Application abort!!'); // with error level\r\nCarpet.info('I am awesome'); // with info level\r\n```\r\n\r\nLogs can take any type and any amount of parameters\r\n\r\n```js\r\nCarpet.warn('log me', {}, [], 1, -1, Infinity, function(){} /* any other type here */); // with log level\r\n```\r\n\r\n**Clearing the output**\r\n\r\nTo clear the output just call `Carpet.clearConsole()`\r\n\r\n# Contribution\r\n\r\n## Setup for development\r\n\r\n```\r\n  npm install\r\n  grunt dist      # Generates dist files with full testing and linting\r\n  # or\r\n  grunt dist-dev  # Generates dist files without checking the code\r\n```\r\n\r\n## Generating JSDoc\r\n\r\n```\r\ngrunt docs\r\n```\r\n\r\n## Running unit tests\r\n\r\n```\r\nnpm test\r\n```\r\n\r\nFeel free to contribute or add [issues](https://github.com/mateuszgachowski/Carpet.js/issues) and questions\r\n","google":"UA-56787014-1","note":"Don't delete this file! It's used internally to help with page regeneration."}