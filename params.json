{"name":"Carpet.js","tagline":"A simple DOM-module JavaScript framework","body":"# ![Carpet.js Icon](http://mgachowski.pl/carpetjs.svg) Carpet.js\r\n\r\n<small>project icon: Rug by Factorio.us collective from The Noun Project</small>\r\n\r\nMaster: [![Build Status](https://travis-ci.org/mateuszgachowski/Carpet.js.svg?branch=master)](https://travis-ci.org/mateuszgachowski/Carpet.js) Develop: [![Build Status](https://travis-ci.org/mateuszgachowski/Carpet.js.svg?branch=develop)](https://travis-ci.org/mateuszgachowski/Carpet.js)\r\n\r\n# Features\r\n\r\n- Lightweight: Minified: 2.2K, Minified & Gzipped: < 1K\r\n- Easy and Module based\r\n- Easily extendable by components\r\n\r\n**Browser Support (tested)**\r\n\r\n- IE 9.0.0 (Windows Vista)\r\n- IE 10.0.0 (Windows 8)\r\n- IE 11.0.0 (Windows 8.1)\r\n- Firefox 33.0.0 (Windows 8)\r\n- Safari 8.0.0 (Mac OS X 10.10)\r\n- Chrome 39.0.2171 (Mac OS X 10.10.0)\r\n\r\n\r\n\r\n# Framework Usage\r\n\r\n## Installation\r\n\r\n```\r\nbower install carpet\r\n```\r\n\r\nor download the compressed file [from here](https://github.com/mateuszgachowski/Carpet.js/blob/master/dist/carpet.min.js)\r\n\r\n## Minimal application\r\n\r\nMinimal application will not do anything until you define some modules.\r\n\r\nExample:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <title>Carpet.js - Sample usage</title>\r\n  </head>\r\n  <body>\r\n    <!-- your code here -->\r\n    <script src=\"bower_components/carpet/dist/carpet.min.js\"></script>\r\n\r\n    <script>\r\n      Carpet.init(); // Initialises the framework\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Modules\r\n\r\nCarpet.js is about modules so you have to define one before you start.\r\nModules are defined very easily:\r\n\r\nIn html file:\r\n\r\n```html\r\n<div data-module=\"myFirstModule\"></div>\r\n```\r\nIn JS file (before `Carpet.init()`)\r\n\r\n```js\r\nCarpet.module('myFirstModule', function (exports, settings, context) {\r\n  'use strict';\r\n\r\n  exports.init = function () {\r\n    console.log('I will show when a data-module=\"myFirstModule\" will be found in DOM');\r\n  };\r\n});\r\n```\r\n\r\n`Carpet.module()` takes two parameters:\r\n- name of the module (string, it should fit the name put in `data-module` attribute)\r\n- module body (function which will contain all the module body)\r\n\r\nYour module body will be called with three parameters: `exports`, `settings` and `context`.\r\n\r\n- `exports` - object which will be 'public', you can extend it with a function or properties. `exports.init` is reserved for the initial function which will be called immediately after module init. If you do not provide `exports.init` the module will stay in the memory but have to be initialized in another way (e.g. PubSub)\r\n- `settings` - object with module settings. Settings can be passed by the DOM attribute as following:\r\n```js\r\ndata-settings=\"{'key' : 'value', sample: [1, 3, 5]}\"\r\n```\r\n\r\n- `context` - is a HTML DOM context which should be used as scope for all DOM finding actions, e.g. using jQuery:\r\n```js\r\n$('a', context).anything(); // or\r\n$(context).find('.my-pro-element').on('click', anotherFunction);\r\n```\r\n\r\n**Additional informations**\r\n\r\nIn module body you can also access its `this` context where you can find some additional data:\r\n\r\n```js\r\nthis.name       // - (string) containing the name of the module\r\nthis.moduleBody // - (function) body of the module\r\nthis.settings   // - (object) settings object\r\nthis.methods    // - (object) all public methods - same as 'exports'\r\n```\r\n\r\n## Logging to console\r\n\r\nCarpet.js comes with bunch of console.log extensions which will help you to organise your console output.\r\n\r\nSample logs:\r\n```js\r\nCarpet:log [\"Module: navigation has been loaded to memory\"]\r\nCarpet:info [\"Module: navigation has been autoinited\"]\r\n```\r\n\r\n**Enable logging**\r\n\r\nLogging is disabled by default. You can easily enable it by just setting the `Carpet.loggingEnabled` to `true`.\r\nRemember the property must be set before `Carpet.init()`.\r\n\r\n```js\r\nCarpet.loggingEnabled = true;\r\n```\r\n\r\n**Use available logging methods**\r\n\r\n```js\r\nCarpet.log('log me'); // with log level\r\nCarpet.warn('something wrong!'); // with warn level\r\nCarpet.error('Application abort!!'); // with error level\r\nCarpet.info('I am awesome'); // with info level\r\n```\r\n\r\nLogs can take any type and any amount of parameters\r\n\r\n```js\r\nCarpet.warn('log me', {}, [], 1, -1, Infinity, function(){} /* any other type here */); // with log level\r\n```\r\n\r\n**Clearing the output**\r\n\r\nTo clear the output just call `Carpet.clearConsole()`\r\n\r\nFor more information you can check the [API documentation](http://mateuszgachowski.github.io/Carpet.js/api_docs/index.html)\r\n\r\n# Writing your own components\r\n\r\nComponents are separated logic in Carpet.js. They can be loaded inside the modules. Before first load they stay in the memory - not executed.\r\n\r\n*You can use them as helpers or any other kind of separated logic.*\r\n\r\nWriting a component is very easy:\r\n\r\n```js\r\nCarpet.registerComponent('componentName', function () {\r\n\r\n  Carpet.log(this); // => { name: 'componentName', componentBody: function...}\r\n\r\n  return {\r\n    componentMethod : function () {\r\n      return 1;\r\n    },\r\n\r\n    componentProperty : [1, 5, 7],\r\n\r\n    anythingYouWant : {}\r\n  };\r\n});\r\n```\r\n\r\nComponent can return any type. Object with methods or a simple function are the preferred pattern.\r\n\r\nComponent is inactive until the first 'require'. You can get the component in two ways:\r\n\r\n```js\r\n// Globally (from anywhere)\r\nCarpet.getComponent('componentName'); // => { componentMethod: function...}\r\n\r\n// Locally in the module (preferred)\r\nCarpet.module('myModule', function (exports, settings, context) {\r\n  var mySweetComponent = this.component('componentName');\r\n\r\n  Carpet.log(mySweetComponent);\r\n  // =>\r\n  // {\r\n  //  componentMethod : function () { return 1; },\r\n  //  componentProperty : [1, 5, 7],\r\n  //  anythingYouWant : {}\r\n  // }\r\n});\r\n```\r\n\r\nComponents have to be loaded before modules, so the structure looks like this:\r\n\r\n```html\r\n  <!-- Carpet.js -->\r\n  <script src=\"carpet.min.js\"></script>\r\n\r\n  <!-- Components -->\r\n  <script src=\"components/myComponent.js\"></script> <!-- HERE -->\r\n\r\n  <!-- Modules -->\r\n  <script src=\"modules/myModule.js\"></script>\r\n\r\n  <!-- Application init -->\r\n  <script>Carpet.init();</script>\r\n\r\n```\r\n\r\nCarpet.js comes with some components included, but they are not added in the core library by default. You must add them to your html file with a `script` tag.\r\n\r\n# Contribution\r\n\r\n## Setup for development\r\n\r\n```\r\nnpm install\r\ngrunt dist      # Generates dist files with full testing and linting\r\n# or\r\ngrunt dist-dev  # Generates dist files without checking the code\r\n```\r\n\r\n## Generating JSDoc\r\n\r\n```\r\ngrunt docs\r\n```\r\n\r\n## Running unit tests\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n## Branching model and submitting changes\r\n\r\nCarpet.js is using the great [GitHub Flow](https://github.com/mborsuk/hubflow). Please follow installation instruction from their README file.\r\n\r\nAfter you install HubFlow on your machine run this command in the **forked** Carpet.js repository:\r\n\r\n```\r\ngit hf init\r\n```\r\n\r\nNow you should be ready to start working on a feature. Feature naming pattern should fit the following:\r\n\r\n```\r\nmg-short-description\r\n^      ^-- Short description separated by dashes (-)\r\n^--- Your initials\r\n\r\nExamples:\r\n\r\nmg-component-pubsub\r\nms-bug-21-wrong-casting # bug or others can be followed by GitHub issue number\r\n```\r\n\r\nTo start working on a feature you will have to create a feature branch.\r\n\r\n```\r\ngit hf feature start mg-component-pubsub\r\n```\r\n\r\nThen you can easily work on your branch, commit and `git hf push` your changes.\r\nAfter you finish your functionality and all tests are passing correctly (locally and by Travis CI) you can submit a Pull Request.\r\n\r\nIf the Pull request has been merged correctly you can just finish the branch by:\r\n\r\n```\r\ngit hf feature finish mg-component-pubsub\r\n```\r\n\r\nThats all, your feature will be released in next version!\r\n\r\n## Writing build-in components\r\n\r\nWriting Carpet.js components don't differ from normal component registration pattern but requires documentation and full test coverage.\r\n\r\nAs a sample you can take a look at the advice component and its tests:\r\n\r\n```js\r\n/**\r\n * @module advice\r\n */\r\nCarpet.registerComponent('advice', function () {\r\n  'use strict';\r\n\r\n  return {\r\n    /**\r\n     * Wrapes function around\r\n     *\r\n     * @param  {Function} base    Function to wrap on\r\n     * @param  {Function} wrapped Wrapping function\r\n     * @return {Function}         Wrapped function body\r\n     */\r\n    around: function (base, wrapped) {\r\n      return function composedAround() {\r\n        // unpacking arguments by hand is faster\r\n        var i = 0;\r\n        var l = arguments.length;\r\n        var args = new Array(l + 1);\r\n\r\n        args[0] = base.bind(this);\r\n        for (; i < l; i++) {\r\n          args[i + 1] = arguments[i];\r\n        }\r\n        return wrapped.apply(this, args);\r\n      };\r\n    },\r\n    // etc..\r\n    // [...]\r\n  };\r\n});\r\n```\r\n\r\nFeel free to contribute or add [issues](https://github.com/mateuszgachowski/Carpet.js/issues) and questions\r\n","google":"UA-56787014-1","note":"Don't delete this file! It's used internally to help with page regeneration."}